---
import "../styles/fonts.css";
import "../styles/global.css";
import portrait from "/portrait.jpg";
import paint from "/paint.jpeg";
---

<div
  class="relative mx-12 flex flex-col items-center justify-center xl:flex-row xl:gap-36"
>
  <div class="w-full xl:w-1/2">
    <h1 class="big-text">
      <span id="scribble" class="font-bold"> Welcome!</span>
    </h1>
    <div class="relative">
      <svg class="absolute h-full w-full overflow-visible">
        <defs>
          <linearGradient id="gradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop
              offset="0%"
              style={{ stopColor: "#DC3A2B", stopOpacity: "50%" }}></stop>
            <stop
              offset="100%"
              style={{ stopColor: "#FF073A", stopOpacity: "80%" }}></stop>
          </linearGradient>
        </defs>
        <path
          id="border-path"
          fill="none"
          stroke="url(#gradient)"
          stroke-width="4"
        >
        </path>
      </svg>

      <p id="anim-p" class="p-12 text-lg">
        <span class="font-bold text-primary"> Emmett Forrestel </span><br />
        <br />
        I'm a junior at Brown University studying Electrical Engineering and Applied Mathematics. 
        My focus is on control and dynamic systems, and applied mathematics more broadly. 
        I am very intent on becoming an excellent engineer while maintaining my connection to mathematical beauty.
        I have few other obsessions, namely, the piano and classic literature and philosophy. 
        I am also a walk-on sprinter/hurdler on Brown's track and field team.
        <br /><br />I'm currently wrapping up my summer research at CERN and developing an unscented Kalmann filter for drone dynamics.
        I hope to pursue a PhD in applied mathematics or electrical engineering focusing on control and dynamic systems.<br /><br/>
        I hope you enjoy.
      </p>
    </div>
  </div>

  <div class="relative">
    <img src="/portrait.jpg" class="h-half mt-[20px]" alt="ProfilePicture" />
    <div class="absolute bottom-5 right-0 translate-y-1/4">
      <img src="/paint.svg" alt="RedBars" />
    </div>
  </div>
</div>
<div class="mt-36 h-8 w-full bg-black"></div>

<style>
  #border-path {
    animation: draw 1s forwards 1s ease-out;
  }
  @keyframes draw {
    to {
      stroke-dashoffset: 0;
    }
  }
  .h-half {
    width: 40vw;
    border-radius: 40px;
  }
  .big-text {
    font-size: 4rem;
  }
</style>

<script>
  function updatePath() {
    const textMain = document.querySelector("#anim-p") as HTMLElement;
    const path = document.querySelector("#border-path") as SVGPathElement;

    if (textMain && path) {
      const screenWidth = window.innerWidth;

      // Set the path, adjusting the downward extension based on screen size
      let pathData = `M0,0 V${textMain.offsetHeight}`;
      
      // If the screen is smaller than 1280px, include the downward extension
      if (screenWidth < 1280) {
        pathData += ` H${textMain.offsetWidth} v${textMain.offsetHeight / 2}`;
      }
      else{
        pathData += ` H${textMain.offsetWidth * 2.05}`;
      }

      path.setAttribute("d", pathData);
    }

    const pathLength = path.getTotalLength();
    path.style.strokeDasharray = pathLength.toString();
    path.style.strokeDashoffset = pathLength.toString();
  }

  function incrementCounter(
    selector: string,
    current: number,
    target: number,
    duration: number,
    letter: string = ""
  ) {
    let counter = document.getElementById(selector);
    let stepTime = Math.abs(Math.floor(duration / target));
    if (current < target && counter) {
      current++;
      counter.innerText = current.toString() + letter;
      setTimeout(
        () => incrementCounter(selector, current, target, duration, letter),
        stepTime
      );
    }
  }

  window.addEventListener("DOMContentLoaded", updatePath);
  window.addEventListener("resize", updatePath);
</script>
